<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--设置别名-->
    <alias name="user" alias="shiyongzhe"></alias>

    <!--使用name设置别名，可用空格或者,或者;设置多个别名-->
    <bean class="cn.tulingxueyuan.beans.User" id="user" name="user2 user3,user4;user5">
        <description>用来描述bean是干嘛用的</description>
    </bean>

    <!--使用import可以导入其他spring的xml配置文件
    <import resource="spring_ioc.xml"></import>-->

    <!--******************************************************************-->
    <!--基于setter方法的依赖注入-->
    <bean class="cn.tulingxueyuan.beans.User" id="user6">
        <property name="id" value="1"></property>
        <property name="userName" value="诸葛亮"></property>
        <property name="realName" value="袁点"></property>
    </bean>

    <!--基于构造函数的依赖注入
       1.基于name属性设置构造函数参数
       2.可以只有value属性
       3.如果省略name属性，需要注意参数顺序
       4.如果参数顺序错乱，可以使用name参数，也可以使用index(参数下标从0开始)
     -->
    <bean class="cn.tulingxueyuan.beans.User" id="user7">
        <constructor-arg name="id" value="1"></constructor-arg>
        <constructor-arg name="userName" value="袁点"></constructor-arg>
        <constructor-arg name="realName" value="司马懿"></constructor-arg>
    </bean>

    <!--复杂数据类型的依赖注入-->
    <bean class="cn.tulingxueyuan.beans.Person" id="person">
        <property name="id" value="1"></property>
        <property name="name">
            <null></null>
        </property>
        <property name="gender" value=""></property>
        <!--引用外部bean
        <property name="wife" ref="wife"></property>-->

        <!--使用内部bean-->
        <property name="wife">
            <bean class="cn.tulingxueyuan.beans.Wife">
                <property name="name" value="三上悠亚"></property>
                <property name="age" value="18"></property>
            </bean>
        </property>

        <!--list注入
            如果泛型是基本数据类型<value>
            如果泛型是bean <bean>-->
        <property name="hobbies">
            <list>
                <value>唱歌</value>
                <value>跳舞</value>
            </list>
        </property>

        <!--Map的注入
            如果value是基本数据类型<entry key="1" value="Java"></entry>
            如果value是bean value-ref
            -->
        <property name="course">
            <map>
                <entry key="1" value="Java"></entry>
                <entry key="2" value="MySQL"></entry>
            </map>
        </property>
    </bean>

    <!--<bean class="cn.tulingxueyuan.beans.Wife" id="wife">
        <property name="name" value="三上悠亚"></property>
        <property name="age" value="18"></property>
    </bean>-->

    <!--使用p命名空间简化基于setter属性注入xml配置
         p按Alt+Enter自动加上p命名空间
         设置基本数据类型   或者p:wife-ref引用外部bean
         如果有集合类型，就不支持，需要额外配置 <property>
    -->
    <bean class="cn.tulingxueyuan.beans.Wife" id="wife" p:age="18" p:name="三上悠亚">
    </bean>
    <bean class="cn.tulingxueyuan.beans.Person" id="person2" p:wife-ref="wife">
        <property name="hobbies">
            <list>
                <value>唱歌</value>
                <value>跳舞</value>
            </list>
        </property>
    </bean>

</beans>